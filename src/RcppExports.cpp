// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// psi
float psi(int n, int l, int m, float r, float theta, float phi);
RcppExport SEXP _wavefunction_psi(SEXP nSEXP, SEXP lSEXP, SEXP mSEXP, SEXP rSEXP, SEXP thetaSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< float >::type r(rSEXP);
    Rcpp::traits::input_parameter< float >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< float >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(psi(n, l, m, r, theta, phi));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_wavefunction_psi", (DL_FUNC) &_wavefunction_psi, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_wavefunction(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
